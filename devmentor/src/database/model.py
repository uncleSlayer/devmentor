from typing import Optional, List
from sqlmodel import SQLModel, Field, Relationship
import uuid
from enum import Enum


class User(SQLModel, table=True):

    """
    This class represents a user in the application

    Attributes:
        id (Optional[int]): The primary key of the user
        email (str): The email of the user
        hashed_password (str): The hashed password of the user
    """

    id: Optional[uuid.UUID] = Field(primary_key=True, default_factory=uuid.uuid4)
    email: str = Field(unique=True)
    hashed_password: str


class Conversation(SQLModel, table=True):

    """
    This class represents a conversation between a user and the AI

    Attributes:
        id (Optional[int]): The primary key of the conversation
        user_id (Optional[int]): The foreign key to the user who started the conversation
        questions (List[UserQuestion]): The list of questions asked by the user in the conversation
    """

    id: Optional[uuid.UUID] = Field(primary_key=True, default_factory=uuid.uuid4)
    user_id: Optional[uuid.UUID] = Field(foreign_key="user.id", nullable=False)
    title: Optional[str] = Field(nullable=True)
    questions: List["UserQuestion"] = Relationship(back_populates="conversation")


class UserQuestion(SQLModel, table=True):

    """
    This class represents a question asked by a user to the AI

    Attributes:
        id (Optional[int]): The primary key of the question
        author_id (Optional[int]): The foreign key to the user who asked the question
        conversation_id (Optional[int]): The foreign key to the conversation where the question was asked
        question (str): The question asked by the user
        conversation (Optional[Conversation]): The conversation where the question was asked
    """

    id: Optional[uuid.UUID] = Field(primary_key=True, default_factory=uuid.uuid4)
    author_id: Optional[uuid.UUID] = Field(foreign_key="user.id", nullable=False)
    conversation_id: Optional[uuid.UUID] = Field(foreign_key="conversation.id", nullable=True)
    question: str
    conversation: Optional[Conversation] = Relationship(back_populates="questions")


class AiAnswer(SQLModel, table=True):

    """
    This class represents the answer given by the AI to a question

    Attributes:
        id (Optional[int]): The primary key of the answer
        user_question_id (int): The foreign key to the question that the answer is for
        answer (str): The answer given by the AI
        code_snippet (Optional[str]): The code snippet generated by the AI
        code_language (Optional[str]): The language of the code snippet
    """

    id: Optional[uuid.UUID] = Field(primary_key=True, default_factory=uuid.uuid4)
    user_question_id: uuid.UUID = Field(foreign_key="userquestion.id", nullable=False)
    answer: str
    code_snippet: Optional[str] = Field(nullable=True)
    code_language: Optional[str] = Field(nullable=True)
    suggestions: Optional[List["AiAnswerSuggestion"]] = Relationship(back_populates="ai_answer")


class SuggestionType(str, Enum):
    """
    Enum class to represent the type of suggestion (YouTube or Blog Article)
    """
    YOUTUBE = "youtube"
    BLOG_ARTICLE = "blog_article"

class AiAnswerSuggestion(SQLModel, table=True):
    """
    This class represents additional learning resources (YouTube videos or blog articles)
    suggested by the AI for a specific answer

    Attributes:
        id (Optional[UUID]): The primary key of the suggestion
        ai_answer_id (UUID): The foreign key to the AI answer this suggestion belongs to
        suggestion_type (SuggestionType): The type of suggestion (YouTube or blog article)
        title (str): The title of the suggested resource
        url (str): The URL of the suggested resource
        description (Optional[str]): A brief description of the suggested resource
    """
    
    id: Optional[uuid.UUID] = Field(primary_key=True, default_factory=uuid.uuid4)
    ai_answer_id: uuid.UUID = Field(foreign_key="aianswer.id", nullable=False)
    ai_answer: Optional[AiAnswer] = Relationship(back_populates="suggestions")
    suggestion_type: SuggestionType
    title: str
    url: str
